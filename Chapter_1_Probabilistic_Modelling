
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, WhiteKernel, ConstantKernel as C

# Set random seed for reproducibility
np.random.seed(42)

# Generate synthetic dataset
def generate_data(n_samples=200, noise_level=0.2):
    X = np.sort(np.random.uniform(0, 10, size=n_samples))[:, None]  # Inputs
    y = np.sin(X).ravel() + np.random.normal(0, noise_level, size=n_samples)  # Outputs
    return X, y

# Split data into training and validation sets
X_train, y_train = generate_data(n_samples=100)
X_val, y_val = generate_data(n_samples=50)

# Define kernel and GPR model configurations
kernel = C(1.0, (1e-2, 1e3)) * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2)) + WhiteKernel(noise_level=1e-2)
gpr = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=10, random_state=42)

# Fit the model
print("Fitting Gaussian Process Regression Model...")
gpr.fit(X_train, y_train)

# Generate predictions
X_pred = np.linspace(0, 10, 1000)[:, None]
y_pred, y_std = gpr.predict(X_pred, return_std=True)

# Plot the training data, true function, and predictions
plt.figure(figsize=(12, 6))
plt.plot(X_train, y_train, 'kx', label="Training Data")
plt.plot(X_val, y_val, 'ro', label="Validation Data")
plt.plot(X_pred, np.sin(X_pred), 'g-', label="True Function")
plt.plot(X_pred, y_pred, 'b-', label="GPR Mean Prediction")
plt.fill_between(X_pred.ravel(),
                 y_pred - 1.96 * y_std,
                 y_pred + 1.96 * y_std,
                 color='blue', alpha=0.2, label="95% Confidence Interval")
plt.title("Gaussian Process Regression with Bias-Variance Illustration")
plt.xlabel("X")
plt.ylabel("y")
plt.legend()
plt.show()

# Analyze bias-variance trade-off via MSE on training and validation sets
from sklearn.metrics import mean_squared_error

y_train_pred, _ = gpr.predict(X_train, return_std=True)
y_val_pred, _ = gpr.predict(X_val, return_std=True)

mse_train = mean_squared_error(y_train, y_train_pred)
mse_val = mean_squared_error(y_val, y_val_pred)

print("MSE on Training Data:", mse_train)
print("MSE on Validation Data:", mse_val)

# Illustrate MSE behavior
plt.figure(figsize=(8, 6))
plt.bar(['Training MSE', 'Validation MSE'], [mse_train, mse_val], color=['blue', 'green'])
plt.title("Bias-Variance Tradeoff in GPR")
plt.ylabel("Mean Squared Error")
plt.show()

# Display model kernel and hyperparameters
print("\nFitted Kernel:")
print(gpr.kernel_)
